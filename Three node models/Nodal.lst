GAMS 30.3.0  rc5da09e Released Mar  6, 2020 WEX-WEI x86 64bit/MS Windows - 01/18/22 22:09:30 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  Sets
   2  all_t       all hours               /1*16/
   3  t(all_t)    hours                   /1*16/
   4  tec         generators              /base, peak, wind, solar/
   5  con(tec)    conventional generation /base, peak/
   6  all_n       all buses               /north, south/
   7  n(all_n)    selected buses          /north, south/
   8  ;
   9   
  10   
  11  alias (n,m);
  12  alias (all_n,all_m);
  13   
  14  * parameters for supply and demand functions
  15  Parameter elasticity / -0.25 /;
  16  Parameter p_ref / 65 /;
  17  Parameter specific_network_costs /200/;
  18  Parameter capacity_slope / 0.5 /;
  19  *Source for network costs: EMMA (3400 EUR/MW/km discontiert mit i = 0.07 ueber 40 Jahre)
  20   
  21  Table B(all_n,all_m)        Susceptance of transmission lines
  22           north  south
  23  north        1     700
  24  south      700       1
  25  ;
  26   
  27  Parameters
  28  * Input Parameters
  29  i_cost(*,*)                 cost data to be loaded from sheet "cost"
  30  i_load(all_t,all_n)         load data to be loaded from sheet "time series" in MWh
  31  i_avail(all_t,tec,all_n)    availability data
  32   
  33  * Model Parameters
  34  load_ref(t,n)               hourly load in GWh
  35  avail(t,tec,n)              availability of wind and solar generation (1)
  36  c_var(tec,n)                variable costs (EUR per MWh)
  37  c_fix(tec,n)                annualized fixed costs (EUR per MW p.a.)
  38  cap_lim(tec,n)              capacity limit of generation in each node
  39  grid_cost(n,m)
  40  sc                          scaling factor
  41  a_nodal(t,n)                intercept of inverse nodal demand function
  42  s_nodal(t,n)                slope of inverse nodal demand function
  43   
  44  * Output Parameters
  45  welfare
  46  consumer_surplus
  47  generation_costs
  48  network_cost
  49   
  50  load_deviation(t,n)
  51  res_share
  52   
  53  o_RES_share
  54  o_load(t,n)
  55  o_cap(tec,n)
  56  o_gen(t,tec,n)
  57  price(t,n)
  58  ;
  59   
  60  * Load data
GDXIN   C:\Users\a.eicke\Documents\Locational-investment-signals\Three node models\in.gdx
--- LOAD  i_cost = 1:i_cost
--- LOAD  i_load = 2:i_load
**** Unique domain errors for symbol i_load
**** Only the first 10 errors are shown
 Dim  Elements
   1  17, 18, 19, 20, 21, 22, 23, 24, 25, 26

--- LOAD  i_avail = 3:i_avail
  62  $LOADdc i_cost, i_load, i_avail
****                       $649
**** 649  Domain violation when loading from GDX file
  63   
  64  * Data assignment
  65  sc = card(t) / 8760;
  66  load_ref(t,n)               = i_load(t,n) / 1000;
  67  avail(t,tec,n)              = i_avail(t,tec,n);
  68  avail(t,con,n)              = 1;
  69  c_var(tec, n)               = i_cost(tec,"cost_var");
  70  c_fix(tec, n)               = round(i_cost(tec,"cost_fix") * 1000 * sc);
  71  cap_lim(tec,n)              = 100;
  72  grid_cost(n,m)              = round(B(n,m) * specific_network_costs * sc);
  73   
  74  a_nodal(t,n)                = p_ref *(1-1/elasticity);
  75  s_nodal(t,n)                = p_ref *(1/(elasticity*load_ref(t,n)));
  76   
  77  display sc, c_var, load_ref, avail, c_fix, a_nodal, s_nodal;
  78   
  79  Free variables
  80  LAMBDA(t)
  81  WF
  82  FLOW(t,n,m)
  83  THETA(t,n)
  84   
  85  ;
  86   
  87  Positive variables
  88  LOAD_real(t,n)
  89  GRID_CAP(n,m)
  90  GEN(t,tec,n)
  91  CAP(tec,n)
  92  ;
  93   
  94  Equations
  95  objective, cap_constraint, cap_limit,
  96   
  97  nodal_energy_balance,
  98  grid_eq1, grid_eq2, grid_eq3, grid_eq4;
  99   
 100  * sum((t,n), p_ref * LOAD_real(t,n) * (1-1/elasticity + LOAD_real(t,n) / (2*elasticity* load_ref(t,n))))
 101  objective..                 WF =e= sum((t,n), a_nodal(t,n) * LOAD_real(t,n) + 1/2 * s_nodal(t,n) * LOAD_real(t,n) * LOAD_real(t,n))
 102                                      - sum((tec,n), CAP(tec,n) * c_fix(tec,n) + 0.5 * CAP(tec,n) * CAP(tec,n) * capacity_slope)
 103                                      - sum((t,tec,n), GEN(t,tec,n) * c_var(tec,n))
 104                                      - sum((n,m),(GRID_CAP(n,m) * grid_cost(n,m)) / 2);
 105   
 106  cap_constraint(t,tec,n)..   GEN(t,tec,n)    =L= CAP(tec,n) * avail(t,tec,n);
 107  cap_limit(tec,n)..          CAP(tec,n)      =L= cap_lim(tec,n);
 108   
 109  *nodal energy balance
 110  nodal_energy_balance(t,n).. sum(tec,GEN(t,tec,n)) - LOAD_real(t,n) =E= sum(m,FLOW(t,n,m));
 111   
 112  *network constraints
 113  grid_eq1(t,n,m)..           FLOW(t,n,m)     =l= GRID_CAP(n,m);
 114  grid_eq2(n,m)..             GRID_CAP(n,m)   =e= GRID_CAP(m,n);
 115  grid_eq3(t,n,m)..           FLOW(t,n,m)     =e= B(n,m) * (THETA(t,n) - THETA(t,m));
 116  grid_eq4(t,n)..             THETA(t,'south') =e= 0;
 117   
 118   
 119  Model nodal /
 120  objective
 121   
 122  cap_constraint
 123  cap_limit
 124   
 125  nodal_energy_balance
 126   
 127  grid_eq1
 128  grid_eq2
 129  grid_eq3
 130  grid_eq4
 131  /;
 132   
 133  * Set starting point
 134  LOAD_real.L(t,n) =load_ref(t,n);
 135   
 136  Solve nodal using QCP max WF;
****                              $257
**** 257  Solve statement not checked because of previous errors
 137   
 138  price(t,n) = p_ref * (1-1/elasticity + (LOAD_real.L(t,n)) / (elasticity * load_ref(t,n)));
 139   
 140  network_cost = sum((n,m),(GRID_CAP.L(n,m) * grid_cost(n,m)) / 2);
****                                     $141
**** 141  Symbol declared but no values have been assigned. Check for missing
****         data definition, assignment, data loading or implicit assignment
****         via a solve statement.
****         A wild shot: You may have spurious commas in the explanatory
****         text of a declaration. Check symbol reference list.
 141  consumer_surplus = sum((t,n), a_nodal(t,n) * LOAD_real.L(t,n) + 1/2 * s_nodal(t,n) * LOAD_real.L(t,n) * LOAD_real.L(t,n));
 142   
 143  generation_costs = (sum((tec,n), CAP.L(tec,n) * c_fix(tec,n) + 0.5 * CAP.L(tec,n) * CAP.L(tec,n) * capacity_slope) + sum((t,tec,n), GEN.L(t,tec,n) * c_var(tec,n)));
****                                       $141                                                                                               $141
**** 141  Symbol declared but no values have been assigned. Check for missing
****         data definition, assignment, data loading or implicit assignment
****         via a solve statement.
****         A wild shot: You may have spurious commas in the explanatory
****         text of a declaration. Check symbol reference list.
 144   
 145  load_deviation(t,n) =  LOAD_real.L(t,n) - load_ref(t,n);
 146  res_share = 1 - sum((t,con,n), GEN.L(t,con,n)) / sum((t,tec,n), GEN.L(t,tec,n));
 147  o_cap(tec,n) = CAP.L(tec,n);
 148  o_gen(t,tec,n) = GEN.L(t,tec,n);
 149  welfare = WF.L;
****               $141
**** 141  Symbol declared but no values have been assigned. Check for missing
****         data definition, assignment, data loading or implicit assignment
****         via a solve statement.
****         A wild shot: You may have spurious commas in the explanatory
****         text of a declaration. Check symbol reference list.
 150   
 151  Display WF.L, consumer_surplus, generation_costs, network_cost, CAP.L, GEN.L,  price, load_deviation,  GRID_CAP.L, FLOW.L;
****                                                                                                                          $141
**** 141  Symbol declared but no values have been assigned. Check for missing
****         data definition, assignment, data loading or implicit assignment
****         via a solve statement.
****         A wild shot: You may have spurious commas in the explanatory
****         text of a declaration. Check symbol reference list.
 152   
 153  execute_UNLOAD 'Output/nodal.gdx' welfare, consumer_surplus, generation_costs, network_cost, o_gen, o_cap, price, c_fix;

**** 7 ERROR(S)   0 WARNING(S)
GAMS 30.3.0  rc5da09e Released Mar  6, 2020 WEX-WEI x86 64bit/MS Windows - 01/18/22 22:09:30 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\a.eicke\Documents\Locational-investment-signals\Three node models\nodal.gms
     2       61 GDXIN          1      61  C:\Users\a.eicke\Documents\Locational-investment-signals\Three node models\in.gdx


COMPILATION TIME     =        0.000 SECONDS      3 MB  30.3.0 rc5da09e WEX-WEI


USER: Small MUD - 5 User License                     S190305:0326AO-WIN
      Hertie School of Governance GmbH, Governance of DigitalizaDC14808
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\a.eicke\Documents\Locational-investment-signals\Three node models\nodal.gms
Output     C:\Users\a.eicke\Documents\Locational-investment-signals\Three node models\nodal.lst

**** USER ERROR(S) ENCOUNTERED

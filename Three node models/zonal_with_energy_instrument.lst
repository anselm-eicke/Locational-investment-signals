GAMS 30.3.0  rc5da09e Released Mar  6, 2020 WEX-WEI x86 64bit/MS Windows - 10/27/21 22:56:30 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  Sets
   2  all_t       all hours               /1*48/
   3  t(all_t)    hours                   /1*24/
   4  tec         generators              /base, peak, wind, solar/
   5  con(tec)    conventional generation /base, peak/
   6  all_n       all buses               /north, south, total/
   7  n(all_n)    selected buses          /north, south/
   8  ;
   9   
  10  alias (n,m);
  11  alias (all_n,all_m);
  12   
  13  * parameters for supply and demand functions
  14  Parameter elasticity / -0.25 /;
  15  Parameter p_ref / 65 /;
  16  Parameter specific_network_costs /300/;
  17  *Source for network costs: EMMA (3400 EUR/MW/km discontiert mit i = 0.07 ueber 40 Jahre)
  18   
  19  Table B(all_n,all_m)        Susceptance of transmission lines
  20           north  south   total
  21  north        1     700    250
  22  south      700       1    500
  23  total      250     500      1
  24  ;
  25   
  26  Parameters
  27  * Input Parameters
  28  i_cost(*,*)                 cost data to be loaded from sheet "cost"
  29  i_load(all_t,all_n)         load data to be loaded from sheet "time series" in MWh
  30  i_avail(all_t,tec,all_n)    availability data
  31   
  32  * Model Parameters
  33  load(t,n)                   hourly load in GWh
  34  avail(t,tec,n)              availability of wind and solar generation (1)
  35  c_var(tec,n)                variable costs (EUR per MWh)
  36  c_fix(tec,n)                annualized fixed costs (EUR per MW p.a.)
  37  capacity_slope
  38  generation_slope
  39  cap_lim(tec,n)              capacity limit of generation in each node
  40  grid_cost(n,m)
  41  sc                          scaling factor
  42   
  43  * Output Parameters
  44  consumer_surplus
  45  generation_costs
  46  total_network_cost
  47  load_deviation(t)
  48  res_share
  49  marginal_fixed_costs(tec,n)
  50  fixed_linear_costs(tec,n)
  51  max_marginal_price_adder(tec,n)
  52  variable_costs(tec,n)
  53  o_WF
  54  o_CS
  55  o_GC
  56  o_NC
  57  o_RES_share
  58  o_load(t,n)
  59  o_cap(tec,n)
  60  o_gen(t,tec,n)
  61  price(t)
  62  o_cap_instr(tec,n)
  63  o_instrument(tec,n)
  64  sum_instrument
  65  network_cost
  66   
  67  i_WF
  68  i_instrument(tec,n)
  69  i_cap(tec,n)
  70  i_lambda(t)
  71  i_load_real(t,n)
  72  i_gen(t,tec,n)
  73  i_grid_cap(n,m)
  74  i_flow(t,n,m)
  75  i_up(t,tec,n)
  76  i_down(t,tec,n)
  77  i_mu_G_min(t,tec,n)
  78  i_mu_G_max(t,tec,n)
  79  i_mu_C_min(tec,n)
  80  i_mu_C_max(tec,n)
  81  i_mu_D_min(t,n)
  82  ;
  83   
  84  * Load data
GDXIN   C:\Users\a.eicke\Documents\Locational-investment-signals\Three node models\in.gdx
--- LOAD  i_cost = 1:i_cost
--- LOAD  i_load = 2:i_load
--- LOAD  i_avail = 3:i_avail
  87   
  88  * Data assignment
  89  sc = card(t) / 8760;
  90  load(t,n)                   = i_load(t,n) / 1000;
  91  avail(t,tec,n)              = i_avail(t,tec,n);
  92  avail(t,con,n)              = 1;
  93  c_var(tec, n)               = i_cost(tec,"cost_var");
  94  c_fix(tec, n)               = round(i_cost(tec,"cost_fix") * 1000 * sc);
  95  capacity_slope              = 0.15;
  96  cap_lim(tec,n)              = 100;
  97  grid_cost(n,m)              = round(B(n,m) * specific_network_costs * sc);
  98   
  99  display c_var, load, avail, c_fix;
 100   
 101  Parameters
 102  consumer_surplus
 103  generation_costs
 104  total_network_cost
 105  res_share
 106   
 107  o_WF
 108  o_CS
 109  o_GC
 110  o_NC
 111  o_RES_share
 112   
 113  o_cap(tec,n)
 114  price(t)
 115  load_deviation(t)
 116  INSTRUMENT(tec,n)
 117  ;
 118   
 119  INSTRUMENT(tec,n) = 0;
 120   
 121  Binary variables y1(t,tec,n),y2(t,tec,n),y3(tec,n),y4(tec,n),y5(t,n),y6(t);
 122   
 123  Parameter M1 / 100000/;
 124  Parameter M2 / 100000/;
 125  Parameter M3 / 100000/;
 126  Parameter M4 / 100000/;
 127  Parameter M5 / 100000/;
 128  Parameter M6 / 100000/;
 129   
 130  Free Variables
 131  GEN(t,tec,n)
 132  CAP(tec,n)
 133  WF
 134  FLOW(t,n,m)
 135   
 136  THETA(t,n)
 137  LAMBDA(t)
 138  ;
 139   
 140  Positive variables
 141  mu_G_min(t,tec,n)
 142  mu_G_max(t,tec,n)
 143  mu_C_min(tec,n)
 144  mu_C_max(tec,n)
 145  mu_D_min(t,n)
 146   
 147  GRID_CAP(n,m)
 148  LOAD_real(t,n)
 149  UP(t,tec,n)
 150  DOWN(t,tec,n)
 151  ;
 152   
 153  alias(tec, ttec);
 154  alias(n, nn);
 155   
 156   
 157  Equations
 158   
 159  objective, instr_const,
 160  nodal_energy_balance,
 161  grid_eq1, grid_eq2, grid_eq3, grid_eq4,
 162  redispatch1, redispatch2,
 163   
 164  gen_min, gen_max,
 165  cap_min, cap_max,
 166  demand_min,
 167  energy_balance,
 168   
 169  KKT_GEN, KKT_CAP, KKT_load,
 170   
 171   
 172  complementarity1a,
 173  complementarity1b,
 174  complementarity2a,
 175  complementarity2b,
 176  complementarity3a,
 177  complementarity3b,
 178  complementarity4a,
 179  complementarity4b,
 180  complementarity5a,
 181  complementarity5b,
 182  complementarity6a,
 183  complementarity6b
 184  ;
 185   
 186  objective..                     WF =e= sum(t, p_ref * sum((n), LOAD_real(t,n)) * (1-1/elasticity + sum((n), LOAD_real(t,n)) / (2*elasticity* sum(n,load(t,n)))))
 187                                      - sum((tec,n), CAP(tec,n) * c_fix(tec,n) + 0.5 * CAP(tec,n) * CAP(tec,n) * capacity_slope)
 188                                      - sum((t,tec,n), GEN(t,tec,n) * c_var(tec,n))
 189                                      - sum((n,m),(GRID_CAP(n,m) * grid_cost(n,m)) / 2)
 190                                      - sum((t,tec,n), UP(t,tec,n) * c_var(tec,n) - DOWN(t,tec,n) * c_var(tec,n));
 191   
 192   
 193  nodal_energy_balance(t,n)..     sum(tec,GEN(t,tec,n) - DOWN(t,tec,n) + UP(t,tec,n)) - LOAD_real(t,n) =E= sum(m,FLOW(t,n,m));
 194   
 195  *network constraints
 196  grid_eq1(t,n,m)..               FLOW(t,n,m) =l= GRID_CAP(n,m);
 197  grid_eq2(n,m)..                 GRID_CAP(n,m) =e= GRID_CAP(m,n);
 198  grid_eq3(t,n,m)..               FLOW(t,n,m) =e= B(n,m) *(THETA(t,n) - THETA(t,m));
 199  grid_eq4(t,n)..                 THETA(t,'south') =e= 0;
 200   
 201  redispatch1(t,tec,n)..          DOWN(t,tec,n) =L= GEN(t,tec,n);
 202  redispatch2(t,tec,n)..          UP(t,tec,n) =L= CAP(tec,n) * avail(t,tec,n) - GEN(t,tec,n);
 203   
 204  *instr_const
 205   
 206  ** INNER PROBLEM
 207   
 208  gen_min(t,tec,n)..              0 =g= -GEN(t,tec,n);
 209  gen_max(t,tec,n)..              0 =g= GEN(t,tec,n) - CAP(tec,n) * avail(t,tec,n);
 210   
 211  cap_min(tec,n)..                0 =g= -CAP(tec,n);
 212  cap_max(tec,n)..                0 =g= CAP(tec,n) - cap_lim(tec,n);
 213   
 214  demand_min(t,n)..               0 =g= -LOAD_real(t,n);
 215   
 216  energy_balance(t)..             0 =e= sum((tec,n),GEN(t,tec,n)) - sum(n,LOAD_real(t,n));
 217   
 218  *KKT conditions
 219  KKT_GEN(t,tec,n)..              c_var(tec,n) + INSTRUMENT(tec,n) + mu_G_max(t,tec,n) - mu_G_min(t,tec,n) - LAMBDA(t) =e= 0;
 220  KKT_CAP(tec,n)..                c_fix(tec,n) + capacity_slope * CAP(tec,n) - sum(t,avail(t,tec,n) * mu_G_max(t,tec,n)) + mu_C_max(tec,n) - mu_C_min(tec,n) =e= 0;
 221  KKT_load(t,n)..                 -p_ref * ((1-1/elasticity) + LOAD_real(t,n) / (elasticity * load(t,n))) - mu_D_min(t,n) + LAMBDA(t) =e= 0;
 222   
 223  complementarity1a(t,tec,n)..    GEN(t,tec,n)        =L= y1(t,tec,n) * M1;
 224  complementarity1b(t,tec,n)..    mu_G_min(t,tec,n)   =L= (1-y1(t,tec,n)) * M1;
 225  complementarity2a(t,tec,n)..    CAP(tec,n) * avail(t,tec,n) - GEN(t,tec,n) =L= y2(t,tec,n) * M2;
 226  complementarity2b(t,tec,n)..    mu_G_max(t,tec,n)   =L= (1-y2(t,tec,n)) * M2;
 227  complementarity3a(tec,n)..      CAP(tec,n)          =L= y3(tec,n) * M3;
 228  complementarity3b(tec,n)..      mu_C_min(tec,n)     =L= (1-y3(tec,n)) * M3;
 229  complementarity4a(tec,n)..      cap_lim(tec,n) - CAP(tec,n) =L= y4(tec,n) * M4;
 230  complementarity4b(tec,n)..      mu_C_max(tec,n)     =L= (1-y4(tec,n)) * M4;
 231   
 232  complementarity5a(t,n)..        LOAD_real(t,n)      =L= y5(t,n) * M5;
 233  complementarity5b(t,n)..        mu_D_min(t,n)       =L= (1-y5(t,n)) * M5;
 234  complementarity6a(t)..          sum(n,LOAD_real(t,n)) - sum((tec,n),GEN(t,tec,n)) =L= y6(t) * M6;
 235  complementarity6b(t)..          LAMBDA(t)           =L= (1-y6(t)) * M6;
 236   
 237  Model LOCI /
 238   
 239   
 240  objective
 241  nodal_energy_balance
 242   
 243  grid_eq1
 244  grid_eq2
 245  grid_eq3
 246  grid_eq4
 247   
 248  redispatch1
 249  redispatch2
 250   
 251   
 252  gen_min
 253  gen_max
 254  cap_min
 255  cap_max
 256   
 257  demand_min
 258  energy_balance
 259   
 260  KKT_GEN
 261  KKT_CAP
 262  KKT_load
 263   
 264  complementarity1a
 265  complementarity1b
 266  complementarity2a
 267  complementarity2b
 268  complementarity3a
 269  complementarity3b
 270  complementarity4a
 271  complementarity4b
 272  complementarity5a
 273  complementarity5b
 274  complementarity6a
 275  complementarity6b
 276  /;
 277   
 278   
 279  GEN.up(t,tec,n) = 100;
 280  GEN.lo(t,tec,n) = 0;
 281   
 282  DOWN.up(t,tec,n) = 100;
 283  DOWN.lo(t,tec,n) = 0;
 284   
 285  UP.up(t,tec,n) = 100;
 286  UP.lo(t,tec,n) = 0;
 287   
 288  LOCI.nodlim = 25000000;
 289  LOCI.resLim = 40000;
 290   
 291  *This should matter. But does it really do?
 292  *Option OptCA = 10;
 293   
 294  Option MIQCP = Cplex;
 295   
 296   
 297  Solve LOCI maximizing WF using MIQCP;
 298   
 299   
 300  price(t) = p_ref * (1-(1/elasticity) + (sum((tec,n), GEN.L(t,tec,n)) / sum(n, elasticity * load(t,n))));
 301  load_deviation(t) = sum((tec,n), GEN.L(t,tec,n)) / sum(n,load(t,n));
 302  i_instrument(tec,n) = INSTRUMENT.L(tec,n) / sc / 1000;
****                                   $142
**** 142  No suffix allowed here - suffix ignored
 303   
 304  network_cost = (sum((n,m),(GRID_CAP.L(n,m) * grid_cost(n,m)) / 2) + sum((t,tec,n), UP.L(t,tec,n) * c_var(tec,n) - DOWN.L(t,tec,n) * c_var(tec,n))) / sc;
 305  consumer_surplus = sum(t, p_ref * sum((n), LOAD_real.L(t,n)) * (1-1/elasticity + sum((n), LOAD_real.L(t,n)) / (2*elasticity* sum(n,load(t,n))))) / sc;
 306   
 307  generation_costs = (sum((tec,n), CAP.L(tec,n) * c_fix(tec,n) + 0.5 * CAP.L(tec,n) * CAP.L(tec,n) * capacity_slope) + sum((t,tec,n), GEN.L(t,tec,n) * c_var(tec,n))) / sc;
 308   
 309  *sum_instrument = sum((tec,n), INSTRUMENT.L(tec,n) * CAP.L(tec,n)) / sc;
 310   
 311  load_deviation(t) = sum(n,LOAD_real.L(t,n)) / sum(n,load(t,n));
 312  res_share = 1 - sum((t,con,n), GEN.L(t,con,n)) / sum((t,tec,n), GEN.L(t,tec,n));
 313  o_cap(tec,n) = CAP.L(tec,n);
 314  o_gen(t,tec,n) = GEN.L(t,tec,n);
 315   
 316   
 317  Display GEN.L, CAP.L, price, i_instrument, load_deviation, network_cost, GRID_CAP.L;
 318   
 319  execute_UNLOAD 'Output/energy_instrument.gdx' consumer_surplus, generation_costs, network_cost, res_share, i_instrument, o_cap, o_gen, price, c_fix;

**** LIST OF STRAY NAMES - CHECK DECLARATIONS FOR SPURIOUS COMMAS
**** STRAY NAME instr_const OF TYPE EQU  

**** 1 ERROR(S)   0 WARNING(S)
GAMS 30.3.0  rc5da09e Released Mar  6, 2020 WEX-WEI x86 64bit/MS Windows - 10/27/21 22:56:30 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\a.eicke\Documents\Locational-investment-signals\Three node models\zonal_with_energy_instrument.gms
     2       85 GDXIN          1      85  C:\Users\a.eicke\Documents\Locational-investment-signals\Three node models\in.gdx


COMPILATION TIME     =        0.016 SECONDS      3 MB  30.3.0 rc5da09e WEX-WEI


USER: Small MUD - 5 User License                     S190305:0326AO-WIN
      Hertie School of Governance GmbH, Governance of DigitalizaDC14808
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\a.eicke\Documents\Locational-investment-signals\Three node models\zonal_with_energy_instrument.gms
Output     C:\Users\a.eicke\Documents\Locational-investment-signals\Three node models\zonal_with_energy_instrument.lst

**** USER ERROR(S) ENCOUNTERED
